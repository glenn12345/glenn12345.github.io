<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Glenn</title>
  <subtitle>你站在桥上看风景，看风景的人在楼上看你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-04T07:48:01.546Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis</title>
    <link href="http://yoursite.com/2019/04/04/redis%E4%BA%8B%E7%89%A9%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/04/04/redis事物操作/</id>
    <published>2019-04-04T07:43:50.000Z</published>
    <updated>2019-04-04T07:48:01.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-事物操作"><a href="#redis-事物操作" class="headerlink" title="redis 事物操作"></a>redis 事物操作</h3><hr>
<ul>
<li>为了确保连续多个操作的原子性，一个成熟的数据库通常都会有事物支持，Redis也不不例外。Redis 的事务使用非常简单，不同于关系数据库，我们无须理解那么多复杂的事务模型，就可以直接使用。不过也正是因为这种简单性，它的事务模型很不严格，这要求我们不能像使用关系数据库的事务一样来使用 Redis。</li>
</ul>
<h4 id="Redis-事务的基本使用"><a href="#Redis-事务的基本使用" class="headerlink" title="Redis 事务的基本使用"></a>Redis 事务的基本使用</h4><ul>
<li>每个事务的操作都有 begin、commit 和 rollback，begin 指示事务的开始，commit 指示事务的提交，rollback 指示事务的回滚。</li>
<li><p><strong>Redis</strong> 在形式上看起来也差不多，分别是 multi/exec/discard。multi 指示事务的开始，exec 指示事务的执行，discard 指示事务的丢弃。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; multi</div><div class="line">OK</div><div class="line">&gt; incr books</div><div class="line">QUEUED</div><div class="line">&gt; incr books</div><div class="line">QUEUED</div><div class="line">&gt; exec</div><div class="line">(integer) 1</div><div class="line">(integer) 2</div></pre></td></tr></table></figure>
</li>
<li><p>上面的指令演示了一个完整的事务过程，所有的指令在 exec 之前不执行，而是缓存在服务器的一个事务队列中，服务器一旦收到 exec 指令，才开执行整个事务队列，执行完毕后一次性返回所有指令的运行结果。因为 Redis 的单线程特性，它不用担心自己在执行队列的时候被其它指令打搅，可以保证他们能得到的「原子性」执行。</p>
</li>
</ul>
<h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><ul>
<li><p>事务的原子性是指要么事务全部成功，要么全部失败，那么 Redis 事务执行是原子性的么？</p>
<p>下面我们来看一个特别的例子。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt; multi</div><div class="line">OK</div><div class="line">&gt; set books iamastring</div><div class="line">QUEUED</div><div class="line">&gt; incr books</div><div class="line">QUEUED</div><div class="line">&gt; set poorman iamdesperate</div><div class="line">QUEUED</div><div class="line">&gt; exec</div><div class="line">1) OK</div><div class="line">2) (error) ERR value is not an integer or out of range</div><div class="line">3) OK</div><div class="line">&gt; get books</div><div class="line">&quot;iamastring&quot;</div><div class="line">&gt;  get poorman</div><div class="line">&quot;iamdesperate</div></pre></td></tr></table></figure>
<ul>
<li>上面的例子是事务执行到中间遇到失败了，因为我们不能对一个字符串进行数学运算，事务在遇到指令执行失败后，后面的指令还继续执行，所以 poorman 的值能继续得到设置。</li>
</ul>
<hr>
<ul>
<li>到这里，你应该明白 Redis 的事务根本不能算「原子性」，而仅仅是满足了事务的「隔离性」，隔离性中的串行化——当前执行的事务有着不被其它事务打断的权利。</li>
</ul>
<h4 id="discard-丢弃"><a href="#discard-丢弃" class="headerlink" title="discard(丢弃)"></a>discard(丢弃)</h4><hr>
<ul>
<li><p>Redis 为事务提供了一个 discard 指令，用于丢弃事务缓存队列中的所有指令，在 exec 执行之前。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt; get books</div><div class="line">(nil)</div><div class="line">&gt; multi</div><div class="line">OK</div><div class="line">&gt; incr books</div><div class="line">QUEUED</div><div class="line">&gt; incr books</div><div class="line">QUEUED</div><div class="line">&gt; discard</div><div class="line">OK</div><div class="line">&gt; get books</div><div class="line">(nil)</div></pre></td></tr></table></figure>
</li>
<li><p>我们可以看到 discard 之后，队列中的所有指令都没执行，就好像 multi 和 discard 中间的所有指令从未发生过一样。</p>
</li>
</ul>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li>上面的 Redis 事务在发送每个指令到事务缓存队列时都要经过一次网络读写，当一个事务内部的指令较多时，需要的网络 IO 时间也会线性增长。所以通常 Redis 的客户端在执行事务时都会结合 pipeline 一起使用，这样可以将多次 IO 操作压缩为单次 IO 操作。比如在使用 Python 的 Redis 客户端时执行事务时是要强制使用 pipeline 的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pipe = redis.pipeline(transaction=true)</div><div class="line">pipe.multi()</div><div class="line">pipe.incr(&quot;books&quot;)</div><div class="line">pipe.incr(&quot;books&quot;)</div><div class="line">values = pipe.execute()</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><hr>
<ul>
<li>考虑到一个业务场景，Redis 存储了我们的账户余额数据，它是一个整数。现在有两个并发的客户端要对账户余额进行修改操作，这个修改不是一个简单的 incrby 指令，而是要对余额乘以一个倍数。Redis 可没有提供 multiplyby 这样的指令。我们需要先取出余额然后在内存里乘以倍数，再将结果写回 Redis。</li>
<li>这就会出现并发问题，因为有多个客户端会并发进行操作。我们可以通过 Redis 的分布式锁来避免冲突，这是一个很好的解决方案。<strong>分布式锁是一种悲观锁，那是不是可以使用乐观锁的方式来解决冲突呢？</strong></li>
</ul>
<hr>
<ul>
<li>Redis 提供了这种 watch 的机制，它就是一种乐观锁。有了 watch 我们又多了一种可以用来解决并发修改的方法。 watch 的使用方式如下：</li>
</ul>
<hr>
<ul>
<li><p>watch 会在事务开始之前盯住 1 个或多个关键变量，当事务执行时，也就是服务器收到了 exec 指令要顺序执行缓存的事务队列时，Redis 会检查关键变量自 watch 之后，是否被修改了 (包括当前事务所在的客户端)。如果关键变量被人动过了，exec 指令就会返回 null 回复告知客户端事务执行失败，这个时候客户端一般会选择重试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; watch books</div><div class="line">OK</div><div class="line">&gt; incr books  # 被修改了</div><div class="line">(integer) 1</div><div class="line">&gt; multi</div><div class="line">OK</div><div class="line">&gt; incr books</div><div class="line">QUEUED</div><div class="line">&gt; exec  # 事务执行失败</div><div class="line">(nil)</div></pre></td></tr></table></figure>
</li>
<li><p>当服务器给 exec 指令返回一个 null 回复时，客户端知道了事务执行是失败的，通常客户端 (redis-py) 都会抛出一个 WatchError 这种错误，不过也有些语言 (jedis) 不会抛出异常，而是通过在 exec 方法里返回一个 null，这样客户端需要检查一下返回结果是否为 null 来确定事务是否执行失败。Redis 禁止在 multi 和 exec 之间执行 watch 指令，而必须在 multi 之前做好盯住关键变量，否则会出错。</p>
</li>
</ul>
<h4 id="redis-为什么不支持回滚"><a href="#redis-为什么不支持回滚" class="headerlink" title="redis 为什么不支持回滚"></a>redis 为什么不支持回滚</h4><ul>
<li>不支持回滚操作是因为redis是先执行指令然后做日志，所以即使发生异常，没有可以用来执行回滚操作的日志。传统的数据库都是先做日志然后再做操作。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;redis-事物操作&quot;&gt;&lt;a href=&quot;#redis-事物操作&quot; class=&quot;headerlink&quot; title=&quot;redis 事物操作&quot;&gt;&lt;/a&gt;redis 事物操作&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;为了确保连续多个操作的原子性，一个成熟的数据库通常都会
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis事物" scheme="http://yoursite.com/tags/redis%E4%BA%8B%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://yoursite.com/2019/03/28/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://yoursite.com/2019/03/28/redis分布式锁/</id>
    <published>2019-03-28T09:15:50.000Z</published>
    <updated>2019-04-04T07:48:30.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-分布式锁"><a href="#redis-分布式锁" class="headerlink" title="redis 分布式锁"></a>redis 分布式锁</h3><ul>
<li>分布式应用进行逻辑处理时经常会遇到并发问题。<blockquote>
<p>   比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）</p>
</blockquote>
</li>
</ul>
<p><img src="evernotecid://F12CDE9A-0715-4265-910A-00F04786C96B/appyinxiangcom/22804977/ENResource/p3" alt="fba0302a820fddbfaa1bdf5abe4f4496.png"></p>
<blockquote>
<p>这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。</p>
</blockquote>
<ul>
<li>分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。</li>
</ul>
<hr>
<ul>
<li>占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解</div><div class="line">&gt; setnx lock:codehole true</div><div class="line">OK</div><div class="line">... do something critical ...</div><div class="line">&gt; del lock:codehole</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。</li>
</ul>
<hr>
<ul>
<li>于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; setnx lock:codehole true</div><div class="line">OK</div><div class="line">&gt; expire lock:codehole 5</div><div class="line">... do something critical ...</div><div class="line">&gt; del lock:codehole</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。</li>
</ul>
<hr>
<ul>
<li>这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。</li>
</ul>
<hr>
<ul>
<li>为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。<br><img src="evernotecid://F12CDE9A-0715-4265-910A-00F04786C96B/appyinxiangcom/22804977/ENResource/p4" alt="d8638ba6af21d56ea7b9d60ef2f66915.png"></li>
</ul>
<hr>
<ul>
<li>为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。</li>
</ul>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; set lock:codehole true ex 5 nx</div><div class="line">OK</div><div class="line">... do something critical ...</div><div class="line">&gt; del lock:codehole</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。</li>
</ul>
<h4 id="超时问题"><a href="#超时问题" class="headerlink" title="超时问题"></a>超时问题</h4><hr>
<ul>
<li>Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。</li>
</ul>
<hr>
<ul>
<li>为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。</li>
</ul>
<hr>
<blockquote>
<p>有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于delifequals这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。</p>
</blockquote>
<hr>
<blockquote>
<p>但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;redis-分布式锁&quot;&gt;&lt;a href=&quot;#redis-分布式锁&quot; class=&quot;headerlink&quot; title=&quot;redis 分布式锁&quot;&gt;&lt;/a&gt;redis 分布式锁&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;blockquot
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis分布式锁" scheme="http://yoursite.com/tags/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>elasticSearch</title>
    <link href="http://yoursite.com/2017/05/05/JWT%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/05/05/JWT入门/</id>
    <published>2017-05-05T09:52:50.000Z</published>
    <updated>2019-03-26T02:30:03.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="elasticSearch安装和使用"><a href="#elasticSearch安装和使用" class="headerlink" title="elasticSearch安装和使用"></a>elasticSearch安装和使用</h2><h4 id="ElasticSearch-是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点"><a href="#ElasticSearch-是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点" class="headerlink" title="ElasticSearch 是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点"></a>ElasticSearch 是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点</h4><ol>
<li>接近实时（NRT）</li>
<li>集群（cluster）</li>
<li>节点（node）</li>
<li>索引（index）</li>
<li>类型（type）</li>
<li>文档（document）</li>
<li>分片和复制（shards &amp; replicas）</li>
</ol>
<hr>
<h4 id="说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java"><a href="#说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java" class="headerlink" title="说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java"></a>说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java</h4><ul>
<li><p>首先检测是否安装java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有安装了，可以oracle官网下载就行了，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">oracle</a></p>
</li>
<li>安装成功之后就可以安装elasticSearch <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">es下载地址</a>或者使用hrew install elasticSearch进行安装</li>
</ul>
<h4 id="启动elasticSearch"><a href="#启动elasticSearch" class="headerlink" title="启动elasticSearch"></a>启动elasticSearch</h4><ul>
<li>其实启动es非常简单直接终端输入elasticsearch就ok了</li>
<li>当然你可以检测是否安装成功<code>http://127.0.0.1:9200/</code>其实我们可以知道es所访问的端口就是9200端口</li>
<li><a href="http://www.jackpu.com/zai-macbookzhong-an-zhuang-elasticsearch/" target="_blank" rel="external">安装教程以及应用</a><br><a href="http://www.jianshu.com/p/f437b893502a" target="_blank" rel="external">入门教程</a><h3 id="在yii2中如何用es进行操作"><a href="#在yii2中如何用es进行操作" class="headerlink" title="在yii2中如何用es进行操作"></a>在yii2中如何用es进行操作</h3></li>
<li>composer安装<code>&quot;yiisoft/yii2-elasticsearch&quot;: &quot;~2.0.0&quot;</code></li>
<li>yii2中如何配置当然我们可以在commom中的main文件中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    &apos;elasticsearch&apos; =&gt; [</div><div class="line">    &apos;class&apos; =&gt; &apos;yii\elasticsearch\Connection&apos;,</div><div class="line">    &apos;nodes&apos; =&gt; [</div><div class="line">        [&apos;http_address&apos; =&gt; &apos;127.0.0.1:9200&apos;],</div><div class="line">    ],</div><div class="line">],</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;elasticSearch安装和使用&quot;&gt;&lt;a href=&quot;#elasticSearch安装和使用&quot; class=&quot;headerlink&quot; title=&quot;elasticSearch安装和使用&quot;&gt;&lt;/a&gt;elasticSearch安装和使用&lt;/h2&gt;&lt;h4 id=&quot;E
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="搜索引擎" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>elasticSearch</title>
    <link href="http://yoursite.com/2017/05/05/elasticSearch%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2017/05/05/elasticSearch初识/</id>
    <published>2017-05-05T09:52:50.000Z</published>
    <updated>2017-05-08T08:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="elasticSearch安装和使用"><a href="#elasticSearch安装和使用" class="headerlink" title="elasticSearch安装和使用"></a>elasticSearch安装和使用</h2><h4 id="ElasticSearch-是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点"><a href="#ElasticSearch-是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点" class="headerlink" title="ElasticSearch 是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点"></a>ElasticSearch 是一款优秀的搜索引擎，用java编写，restful接口的方式进行对接。而且ElasticSearch有几大核心的特点</h4><ol>
<li>接近实时（NRT）</li>
<li>集群（cluster）</li>
<li>节点（node）</li>
<li>索引（index）</li>
<li>类型（type）</li>
<li>文档（document）</li>
<li>分片和复制（shards &amp; replicas）</li>
</ol>
<hr>
<h4 id="说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java"><a href="#说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java" class="headerlink" title="说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java"></a>说了这么多理论的知识对于我们小白来说用处也不大，那么话不多说直接上手，通过上面的所讲的ElasticSearch是用java编写的，所以在安装ElasticSearch首先要确定你的电脑是否安装的java</h4><ul>
<li><p>首先检测是否安装java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有安装了，可以oracle官网下载就行了，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">oracle</a></p>
</li>
<li>安装成功之后就可以安装elasticSearch <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">es下载地址</a>或者使用hrew install elasticSearch进行安装</li>
</ul>
<h4 id="启动elasticSearch"><a href="#启动elasticSearch" class="headerlink" title="启动elasticSearch"></a>启动elasticSearch</h4><ul>
<li>其实启动es非常简单直接终端输入elasticsearch就ok了</li>
<li>当然你可以检测是否安装成功<code>http://127.0.0.1:9200/</code>其实我们可以知道es所访问的端口就是9200端口</li>
<li><a href="http://www.jackpu.com/zai-macbookzhong-an-zhuang-elasticsearch/" target="_blank" rel="external">安装教程以及应用</a><br><a href="http://www.jianshu.com/p/f437b893502a" target="_blank" rel="external">入门教程</a><h3 id="在yii2中如何用es进行操作"><a href="#在yii2中如何用es进行操作" class="headerlink" title="在yii2中如何用es进行操作"></a>在yii2中如何用es进行操作</h3></li>
<li>composer安装<code>&quot;yiisoft/yii2-elasticsearch&quot;: &quot;~2.0.0&quot;</code></li>
<li>yii2中如何配置当然我们可以在commom中的main文件中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    &apos;elasticsearch&apos; =&gt; [</div><div class="line">    &apos;class&apos; =&gt; &apos;yii\elasticsearch\Connection&apos;,</div><div class="line">    &apos;nodes&apos; =&gt; [</div><div class="line">        [&apos;http_address&apos; =&gt; &apos;127.0.0.1:9200&apos;],</div><div class="line">    ],</div><div class="line">],</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;elasticSearch安装和使用&quot;&gt;&lt;a href=&quot;#elasticSearch安装和使用&quot; class=&quot;headerlink&quot; title=&quot;elasticSearch安装和使用&quot;&gt;&lt;/a&gt;elasticSearch安装和使用&lt;/h2&gt;&lt;h4 id=&quot;E
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="搜索引擎" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew更新问题</title>
    <link href="http://yoursite.com/2017/03/28/Homebrew%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/28/Homebrew更新问题/</id>
    <published>2017-03-28T02:59:36.000Z</published>
    <updated>2017-03-28T03:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于homebrew更新php的小陷阱"><a href="#关于homebrew更新php的小陷阱" class="headerlink" title="关于homebrew更新php的小陷阱"></a>关于homebrew更新php的小陷阱</h3><hr>
<p> 今天本来想配置下本地的phpmyadmin,就直接在命令行下执行了<code>brew install phpmyadmin</code> 这个操作之后就没有去管它呢，但是接下来就让我头疼了，当在yii console里写个测试的方法当执行<code>./yii test/test</code> 的时候报了一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP Core Warning &apos;yii\base\ErrorException&apos; with message &apos;PHP Startup: Unable to load dynamic library &apos;/usr/local/Cellar/php70/7.0.17_9/lib/php/extensions/no-debug-non-zts-20151012/swoole.so&apos; - dlopen(/usr/local/Cellar/php70/7.0.17_9/lib/php/extensions/no-debug-non-zts-20151012/swoole.so, 9): image not found&apos;</div></pre></td></tr></table></figure></p>
<p>这下蒙蔽了！！！什么情况之前还是好好的怎么就报错了，百度了下没有找到合适的答案，谷歌了下也没有找到合适的答案，最后去查看phpini也没有报错啊，什么情况了，最后问了我们的老大，解决了问题，原来是我在下载最新的phpmyadmin的时候同时也更新了最新的php版本导致之前找不到最新的动态版本库！！！</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>1.找到之前的版本的php路径我的就是在<code>/usr/local/Cellar/php70/7.0.15_8/lib/php/extensions/no-debug-non-zts-20151012</code>中注意这里一定要是绝对路径<br>2.找到你自己的phpini 文件<br>3.加入<code>extension_dir = /usr/local/Cellar/php70/7.0.15_8/lib/php/extensions/no-debug-non-zts-20151012/</code><br>4.重启<code>php70-fpm restart</code><br>5.如果重启失败 就<code>ps -ef|grep php</code> 查看那些正在执行的进程<br>6.用<code>kill -9 进程</code><br>7.再次重启<br>8.这次再在执行console就ok了</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> homebrew在执行phpmyadmin或者其他相关php的时候会自动更新最新版本，这个一定要注意！！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于homebrew更新php的小陷阱&quot;&gt;&lt;a href=&quot;#关于homebrew更新php的小陷阱&quot; class=&quot;headerlink&quot; title=&quot;关于homebrew更新php的小陷阱&quot;&gt;&lt;/a&gt;关于homebrew更新php的小陷阱&lt;/h3&gt;&lt;hr&gt;

    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="homebrew" scheme="http://yoursite.com/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Node.js事件驱动函数应用</title>
    <link href="http://yoursite.com/2017/03/18/Node-js%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/18/Node-js事件驱动函数应用/</id>
    <published>2017-03-18T02:49:59.000Z</published>
    <updated>2017-03-24T10:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-js事件驱动编程"><a href="#Node-js事件驱动编程" class="headerlink" title="Node.js事件驱动编程"></a>Node.js事件驱动编程</h3><hr>
<ul>
<li>Node.js是什么<br>.  Node.Js是基于javascript语言，建构在google V8 engine以及Linux上的一个非阻塞事件驱动IO框架。nodejs是单进程单线程，但是基于V8的强大驱动力，以及事件驱动模型，nodejs的性能非常高，而且想达到多核或者多进程也不是很难（现在已经有大量的第三方module来实现这个功能）。</li>
<li>如何生动化理解Node.js的事件驱动编程<br>. 在基于线程的方式中（thread-based way）你到了柜台前，把你的点餐单给收银员或者给收银员直接点餐，然后等在那直到你要的食物准备好给你。收银员不能接待下一个人，除非你拿到食物离开。想接待更多的客户，容易！加更多的收银员！<br>. 当然，我们知道快餐店其实不是这样工作的。他们其实就是基于事件驱动方式，这样收银员更高效。只要你把点餐单给收银员，某个人已经开始准备你的食物，而同时收银员在进行收款，当你付完钱，你就站在一边而收银员已经开始接待下一个客户。在一些餐馆，甚至会给你一个号码，如果你的食物准备好了，就呼叫你的号码让你去柜台取。关键的一点是，你没有阻塞下一个客户的订餐请求。你订餐的食物做好的事件会导致某个人做某个动作（某个服务员喊你的订单号码，你听到你的号码被喊到去取食物），在编程领域，我们称这个为回调（callback function）。</li>
<li>Node.js做了什么工作呢<br>. Node.Js使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）<h3 id="Node-js模块系统"><a href="#Node-js模块系统" class="headerlink" title="Node.js模块系统"></a>Node.js模块系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports.world = function() &#123;</div><div class="line">  console.log(&apos;Hello World&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var hello = require(&apos;./hello&apos;);</div><div class="line">hello.world();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Hello() &#123; </div><div class="line">	var name; </div><div class="line">	this.setName = function(thyName) &#123; </div><div class="line">		name = thyName; </div><div class="line">	&#125;; </div><div class="line">	this.sayHello = function() &#123; </div><div class="line">		console.log(&apos;Hello &apos; + name); </div><div class="line">	&#125;; </div><div class="line">&#125;; </div><div class="line">module.exports = Hello;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var Hello = require(&apos;./hello&apos;); </div><div class="line">hello = new Hello(); </div><div class="line">hello.setName(&apos;BYVoid&apos;); </div><div class="line">hello.sayHello();</div></pre></td></tr></table></figure>
<p><a href="http://note.youdao.com/" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-module-system.html</a></p>
<h3 id="Node-js函数"><a href="#Node-js函数" class="headerlink" title="Node.js函数"></a>Node.js函数</h3><ul>
<li><p>匿名函数<br>. 我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function execute(someFunction, value) &#123;</div><div class="line">  someFunction(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">execute(function(word)&#123; console.log(word) &#125;, &quot;Hello&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>函数传递是如何让HTTP服务器工作的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);</div><div class="line"></div><div class="line">function onRequest(request, response) &#123;</div><div class="line">  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</div><div class="line">  response.write(&quot;Hello World&quot;);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">http.createServer(onRequest).listen(8888);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-js事件驱动编程&quot;&gt;&lt;a href=&quot;#Node-js事件驱动编程&quot; class=&quot;headerlink&quot; title=&quot;Node.js事件驱动编程&quot;&gt;&lt;/a&gt;Node.js事件驱动编程&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Node.js是什么&lt;br&gt;.
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Swiper</title>
    <link href="http://yoursite.com/2017/03/15/Swiper/"/>
    <id>http://yoursite.com/2017/03/15/Swiper/</id>
    <published>2017-03-15T10:31:44.000Z</published>
    <updated>2017-03-28T09:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Swiper框架可达到效果"><a href="#Swiper框架可达到效果" class="headerlink" title="Swiper框架可达到效果"></a>Swiper框架<a href="http://www.weikecj.cn/template.jsp" target="_blank" rel="external">可达到效果</a></h3><p>1.Swiper是纯javascript打造的滑动特效插件，面向手机、 平板电脑等移动终端。</p>
<p>2.Swiper能实现触屏焦点图、触屏Tab切换、触屏多图切换 等常用效果。</p>
<p>3.Swiper开源、免费、稳定、使用简单、功能强大，是架 构移动终端网站的重要选择。</p>
<h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><p>1.<a href="http://swiper.com.cn" target="_blank" rel="external">Swiper官网</a>:swiper.com.cn</p>
<p>2.<a href="http://swiper.com.cn/usage/animate" target="_blank" rel="external">Swiper Animate使用方法</a>:swiper.com.cn/usage/animate</p>
<p>3.<a href="http://swiper.com.cn/demo" target="_blank" rel="external">官方效果演示</a>:swiper.com.cn/demo</p>
<p>4.<a href="http://eqxiu.com/s/D797iu2w" target="_blank" rel="external">参考效果</a>:eqxiu.com/s/D797iu2w</p>
<h3 id="Swiper基础文件"><a href="#Swiper基础文件" class="headerlink" title="Swiper基础文件"></a>Swiper基础文件</h3><p>1.swiper库核心js文件:swiper-3.2.7.min.js</p>
<p>2.swiper库核心css文件:swiper-3.2.7.min.css</p>
<h3 id="Swiper-Animate"><a href="#Swiper-Animate" class="headerlink" title="Swiper Animate"></a>Swiper Animate</h3><p>1.Swiper Animate是用于在Swiper内快速制作CSS3动画 效果的小插件，写法简单，功能强大 。</p>
<p>2.swiper animate库核心js文件:swiper.animate.min.js</p>
<p>3.swiper animate库核心css文件:animate.min.css</p>
<p>###rem和vw区别<br>-</p>
<p>###<a href="https://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">rem</a></p>
<p>1.rem 在页面当中在body设置一个基准值 在body设置font-size：10px 其他地方设置大小相对于body设置 例如设置p标签2rem 那么他最终实际大小就是20</p>
<p>2.rem 最早用于@media做不同的css响应的时候用的是rem</p>
<p>###vw</p>
<p>1.vw 他指的是屏幕的百分比  例如：指定文字大小font-size:10vw,他的大小就是屏幕的宽度*10%</p>
<p>2.vw可以轻松搞定弹性布局（CSS3引入了一种新的布局模式——Flexbox布局，即伸缩布局盒模型（Flexible Box），用来提供一个更加有效的方式制定、调整和分布一个容器里项目布局，即使它们的大小是未知或者动态的，这里简称为Flex。），流体布局（简单的来说，就是网页缩小和放大时网页布局会随着浏览器的大小而改变！）。</p>
<p>###弹性布局优势</p>
<p>1.屏幕和浏览器窗口大小发生改变也可以灵活调整布局；</p>
<p>2.可以控制元素在页面上的布局方向；</p>
<p>3.可以按照不同于文档对象模型（DOM）所指定排序方式对屏幕上的元素重新排序。也就是说可以在浏览器渲染中不按照文档流先后顺序重排伸缩项目顺序。</p>
<p>###click事件<a href="http://www.runoob.com/jquerymobile/jquerymobile-panels.html" target="_blank" rel="external">tap</a>事件区别</p>
<p>1.两者都会在点击时触发，但是在手机WEB端，click会有 200~300 ms，所以请用tap代替click作为点击事件。</p>
<p>singleTap和doubleTap 分别代表单次点击和双次点击。</p>
<p>2.处理方式：github上有一个叫做fastclick的库，它也能规避移动设备上click事件的延迟响应<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">地址</a> 实际开发中当元素绑定fastclick后，click响应速度比tap还要快一点点。</p>
<p>###H5触摸事件</p>
<p>现今大多数触屏手机webkit内核提供了touch事件的监听：touchstart,touchmove,touchend,touchcancel</p>
<p>1.touchstart ： 当手指触摸到屏幕会触发；</p>
<p>2.touchmove : 当手指在屏幕上移动时，会触发；</p>
<p>3.touchend : 当手指离开屏幕时，会触发；</p>
<p>4.touchcancel : 当你的手指还没有离开屏幕时，有系统级的操作发生时就会触发</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Swiper框架可达到效果&quot;&gt;&lt;a href=&quot;#Swiper框架可达到效果&quot; class=&quot;headerlink&quot; title=&quot;Swiper框架可达到效果&quot;&gt;&lt;/a&gt;Swiper框架&lt;a href=&quot;http://www.weikecj.cn/template
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="Swiper" scheme="http://yoursite.com/tags/Swiper/"/>
    
  </entry>
  
  <entry>
    <title>Yii-froeach</title>
    <link href="http://yoursite.com/2017/03/15/Yii-froeach/"/>
    <id>http://yoursite.com/2017/03/15/Yii-froeach/</id>
    <published>2017-03-15T09:54:44.000Z</published>
    <updated>2017-03-24T10:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于foreach循环的数据只能新增1条问题"><a href="#关于foreach循环的数据只能新增1条问题" class="headerlink" title="关于foreach循环的数据只能新增1条问题"></a>关于foreach循环的数据只能新增1条问题</h2><h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$model = new User();</div><div class="line">foreach($data as $attributes)</div><div class="line">&#123;</div><div class="line">     $_model = clone $model;</div><div class="line">     $_model-&gt;setAttributes($attributes);</div><div class="line">     $_model-&gt;save();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$model = new User();</div><div class="line">foreach($data as $attributes)</div><div class="line">&#123;</div><div class="line">      $model-&gt;isNewRecord = true;</div><div class="line">      $model-&gt;setAttributes($attributes);</div><div class="line">      $model-&gt;save() &amp;&amp; $model-&gt;id=0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">### 方法三</div></pre></td></tr></table></figure>
<p>如果你不想这么写还有第三种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$rows[] = [ </div><div class="line">&apos;title&apos; =&gt; $model-&gt;title, </div><div class="line">&apos;content&apos; =&gt; $model-&gt;content, </div><div class="line">]; </div><div class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;batchInsert(Post::tableName(), [&apos;title&apos;, &apos;content&apos;], $rows)-&gt;execute();</div></pre></td></tr></table></figure></p>
<h3 id="关于yii2查询的时候-andwhere和andFilterWhere的区别"><a href="#关于yii2查询的时候-andwhere和andFilterWhere的区别" class="headerlink" title="关于yii2查询的时候 andwhere和andFilterWhere的区别"></a>关于yii2查询的时候 andwhere和andFilterWhere的区别</h3><p>有时候我们查询状态为0的数据，这个时候如果不注意这两者的区别用了andFilterWhere这个来查询结果得不到你想要的结果<br>因为andFilterWhere会筛洗掉0货null的条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//在yii中获取数组中的某个值最好用内置的</div><div class="line">ArrayHelper::getValue($params, &apos;created_at_start&apos;);</div><div class="line"></div><div class="line">//如果想把二维数组合成一维数组</div><div class="line">ArrayHelper::getColumn()</div><div class="line"></div><div class="line">#### 抛出异常</div><div class="line">throw new NotFoundHttpException()</div><div class="line"></div><div class="line">#### 获取异常类</div><div class="line">Yii::$app-&gt;errorHandler-&gt;exception</div><div class="line"></div><div class="line">#### 获取异常信息</div><div class="line">Yii::$app-&gt;errorHandler-&gt;exception-&gt;getMessage(),</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于foreach循环的数据只能新增1条问题&quot;&gt;&lt;a href=&quot;#关于foreach循环的数据只能新增1条问题&quot; class=&quot;headerlink&quot; title=&quot;关于foreach循环的数据只能新增1条问题&quot;&gt;&lt;/a&gt;关于foreach循环的数据只能新增1条
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="yii2" scheme="http://yoursite.com/tags/yii2/"/>
    
  </entry>
  
</feed>
