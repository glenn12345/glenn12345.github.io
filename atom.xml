<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Glenn</title>
  <subtitle>你站在桥上看风景，看风景的人在楼上看你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-24T10:07:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js事件驱动函数应用</title>
    <link href="http://yoursite.com/2017/03/18/Node-js%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/18/Node-js事件驱动函数应用/</id>
    <published>2017-03-18T02:49:59.000Z</published>
    <updated>2017-03-24T10:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-js事件驱动编程"><a href="#Node-js事件驱动编程" class="headerlink" title="Node.js事件驱动编程"></a>Node.js事件驱动编程</h3><hr>
<ul>
<li>Node.js是什么<br>.  Node.Js是基于javascript语言，建构在google V8 engine以及Linux上的一个非阻塞事件驱动IO框架。nodejs是单进程单线程，但是基于V8的强大驱动力，以及事件驱动模型，nodejs的性能非常高，而且想达到多核或者多进程也不是很难（现在已经有大量的第三方module来实现这个功能）。</li>
<li>如何生动化理解Node.js的事件驱动编程<br>. 在基于线程的方式中（thread-based way）你到了柜台前，把你的点餐单给收银员或者给收银员直接点餐，然后等在那直到你要的食物准备好给你。收银员不能接待下一个人，除非你拿到食物离开。想接待更多的客户，容易！加更多的收银员！<br>. 当然，我们知道快餐店其实不是这样工作的。他们其实就是基于事件驱动方式，这样收银员更高效。只要你把点餐单给收银员，某个人已经开始准备你的食物，而同时收银员在进行收款，当你付完钱，你就站在一边而收银员已经开始接待下一个客户。在一些餐馆，甚至会给你一个号码，如果你的食物准备好了，就呼叫你的号码让你去柜台取。关键的一点是，你没有阻塞下一个客户的订餐请求。你订餐的食物做好的事件会导致某个人做某个动作（某个服务员喊你的订单号码，你听到你的号码被喊到去取食物），在编程领域，我们称这个为回调（callback function）。</li>
<li>Node.js做了什么工作呢<br>. Node.Js使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）<h3 id="Node-js模块系统"><a href="#Node-js模块系统" class="headerlink" title="Node.js模块系统"></a>Node.js模块系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports.world = function() &#123;</div><div class="line">  console.log(&apos;Hello World&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var hello = require(&apos;./hello&apos;);</div><div class="line">hello.world();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Hello() &#123; </div><div class="line">	var name; </div><div class="line">	this.setName = function(thyName) &#123; </div><div class="line">		name = thyName; </div><div class="line">	&#125;; </div><div class="line">	this.sayHello = function() &#123; </div><div class="line">		console.log(&apos;Hello &apos; + name); </div><div class="line">	&#125;; </div><div class="line">&#125;; </div><div class="line">module.exports = Hello;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var Hello = require(&apos;./hello&apos;); </div><div class="line">hello = new Hello(); </div><div class="line">hello.setName(&apos;BYVoid&apos;); </div><div class="line">hello.sayHello();</div></pre></td></tr></table></figure>
<p><a href="http://note.youdao.com/" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-module-system.html</a></p>
<h3 id="Node-js函数"><a href="#Node-js函数" class="headerlink" title="Node.js函数"></a>Node.js函数</h3><ul>
<li><p>匿名函数<br>. 我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function execute(someFunction, value) &#123;</div><div class="line">  someFunction(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">execute(function(word)&#123; console.log(word) &#125;, &quot;Hello&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>函数传递是如何让HTTP服务器工作的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);</div><div class="line"></div><div class="line">function onRequest(request, response) &#123;</div><div class="line">  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</div><div class="line">  response.write(&quot;Hello World&quot;);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">http.createServer(onRequest).listen(8888);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-js事件驱动编程&quot;&gt;&lt;a href=&quot;#Node-js事件驱动编程&quot; class=&quot;headerlink&quot; title=&quot;Node.js事件驱动编程&quot;&gt;&lt;/a&gt;Node.js事件驱动编程&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Node.js是什么&lt;br&gt;.
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Swiper</title>
    <link href="http://yoursite.com/2017/03/15/Swiper/"/>
    <id>http://yoursite.com/2017/03/15/Swiper/</id>
    <published>2017-03-15T10:31:44.000Z</published>
    <updated>2017-03-24T10:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Swiper框架可达到效果"><a href="#Swiper框架可达到效果" class="headerlink" title="Swiper框架可达到效果"></a>Swiper框架<a href="http://www.weikecj.cn/template.jsp" target="_blank" rel="external">可达到效果</a></h3><p>-</p>
<p>1.Swiper是纯javascript打造的滑动特效插件，面向手机、 平板电脑等移动终端。</p>
<p>2.Swiper能实现触屏焦点图、触屏Tab切换、触屏多图切换 等常用效果。</p>
<p>3.Swiper开源、免费、稳定、使用简单、功能强大，是架 构移动终端网站的重要选择。</p>
<h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><p>1.<a href="http://swiper.com.cn" target="_blank" rel="external">Swiper官网</a>:swiper.com.cn</p>
<p>2.<a href="http://swiper.com.cn/usage/animate" target="_blank" rel="external">Swiper Animate使用方法</a>:swiper.com.cn/usage/animate</p>
<p>3.<a href="http://swiper.com.cn/demo" target="_blank" rel="external">官方效果演示</a>:swiper.com.cn/demo</p>
<p>4.<a href="http://eqxiu.com/s/D797iu2w" target="_blank" rel="external">参考效果</a>:eqxiu.com/s/D797iu2w</p>
<h3 id="Swiper基础文件"><a href="#Swiper基础文件" class="headerlink" title="Swiper基础文件"></a>Swiper基础文件</h3><p>1.swiper库核心js文件:swiper-3.2.7.min.js</p>
<p>2.swiper库核心css文件:swiper-3.2.7.min.css</p>
<h3 id="Swiper-Animate"><a href="#Swiper-Animate" class="headerlink" title="Swiper Animate"></a>Swiper Animate</h3><p>1.Swiper Animate是用于在Swiper内快速制作CSS3动画 效果的小插件，写法简单，功能强大 。</p>
<p>2.swiper animate库核心js文件:swiper.animate.min.js</p>
<p>3.swiper animate库核心css文件:animate.min.css</p>
<p>###rem和vw区别<br>-</p>
<p>###<a href="https://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">rem</a></p>
<p>1.rem 在页面当中在body设置一个基准值 在body设置font-size：10px 其他地方设置大小相对于body设置 例如设置p标签2rem 那么他最终实际大小就是20</p>
<p>2.rem 最早用于@media做不同的css响应的时候用的是rem</p>
<p>###vw</p>
<p>1.vw 他指的是屏幕的百分比  例如：指定文字大小font-size:10vw,他的大小就是屏幕的宽度*10%</p>
<p>2.vw可以轻松搞定弹性布局（CSS3引入了一种新的布局模式——Flexbox布局，即伸缩布局盒模型（Flexible Box），用来提供一个更加有效的方式制定、调整和分布一个容器里项目布局，即使它们的大小是未知或者动态的，这里简称为Flex。），流体布局（简单的来说，就是网页缩小和放大时网页布局会随着浏览器的大小而改变！）。</p>
<p>###弹性布局优势</p>
<p>1.屏幕和浏览器窗口大小发生改变也可以灵活调整布局；</p>
<p>2.可以控制元素在页面上的布局方向；</p>
<p>3.可以按照不同于文档对象模型（DOM）所指定排序方式对屏幕上的元素重新排序。也就是说可以在浏览器渲染中不按照文档流先后顺序重排伸缩项目顺序。</p>
<p>###click事件<a href="http://www.runoob.com/jquerymobile/jquerymobile-panels.html" target="_blank" rel="external">tap</a>事件区别</p>
<p>1.两者都会在点击时触发，但是在手机WEB端，click会有 200~300 ms，所以请用tap代替click作为点击事件。</p>
<p>singleTap和doubleTap 分别代表单次点击和双次点击。</p>
<p>2.处理方式：github上有一个叫做fastclick的库，它也能规避移动设备上click事件的延迟响应<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">地址</a> 实际开发中当元素绑定fastclick后，click响应速度比tap还要快一点点。</p>
<p>###H5触摸事件</p>
<p>现今大多数触屏手机webkit内核提供了touch事件的监听：touchstart,touchmove,touchend,touchcancel</p>
<p>1.touchstart ： 当手指触摸到屏幕会触发；</p>
<p>2.touchmove : 当手指在屏幕上移动时，会触发；</p>
<p>3.touchend : 当手指离开屏幕时，会触发；</p>
<p>4.touchcancel : 当你的手指还没有离开屏幕时，有系统级的操作发生时就会触发</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Swiper框架可达到效果&quot;&gt;&lt;a href=&quot;#Swiper框架可达到效果&quot; class=&quot;headerlink&quot; title=&quot;Swiper框架可达到效果&quot;&gt;&lt;/a&gt;Swiper框架&lt;a href=&quot;http://www.weikecj.cn/template
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="Swiper" scheme="http://yoursite.com/tags/Swiper/"/>
    
  </entry>
  
  <entry>
    <title>Yii-froeach</title>
    <link href="http://yoursite.com/2017/03/15/Yii-froeach/"/>
    <id>http://yoursite.com/2017/03/15/Yii-froeach/</id>
    <published>2017-03-15T09:54:44.000Z</published>
    <updated>2017-03-24T10:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于foreach循环的数据只能新增1条问题"><a href="#关于foreach循环的数据只能新增1条问题" class="headerlink" title="关于foreach循环的数据只能新增1条问题"></a>关于foreach循环的数据只能新增1条问题</h2><h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$model = new User();</div><div class="line">foreach($data as $attributes)</div><div class="line">&#123;</div><div class="line">     $_model = clone $model;</div><div class="line">     $_model-&gt;setAttributes($attributes);</div><div class="line">     $_model-&gt;save();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$model = new User();</div><div class="line">foreach($data as $attributes)</div><div class="line">&#123;</div><div class="line">      $model-&gt;isNewRecord = true;</div><div class="line">      $model-&gt;setAttributes($attributes);</div><div class="line">      $model-&gt;save() &amp;&amp; $model-&gt;id=0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">### 方法三</div></pre></td></tr></table></figure>
<p>如果你不想这么写还有第三种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$rows[] = [ </div><div class="line">&apos;title&apos; =&gt; $model-&gt;title, </div><div class="line">&apos;content&apos; =&gt; $model-&gt;content, </div><div class="line">]; </div><div class="line">Yii::$app-&gt;db-&gt;createCommand()-&gt;batchInsert(Post::tableName(), [&apos;title&apos;, &apos;content&apos;], $rows)-&gt;execute();</div></pre></td></tr></table></figure></p>
<h3 id="关于yii2查询的时候-andwhere和andFilterWhere的区别"><a href="#关于yii2查询的时候-andwhere和andFilterWhere的区别" class="headerlink" title="关于yii2查询的时候 andwhere和andFilterWhere的区别"></a>关于yii2查询的时候 andwhere和andFilterWhere的区别</h3><p>有时候我们查询状态为0的数据，这个时候如果不注意这两者的区别用了andFilterWhere这个来查询结果得不到你想要的结果<br>因为andFilterWhere会筛洗掉0货null的条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//在yii中获取数组中的某个值最好用内置的</div><div class="line">ArrayHelper::getValue($params, &apos;created_at_start&apos;);</div><div class="line"></div><div class="line">//如果想把二维数组合成一维数组</div><div class="line">ArrayHelper::getColumn()</div><div class="line"></div><div class="line">#### 抛出异常</div><div class="line">throw new NotFoundHttpException()</div><div class="line"></div><div class="line">#### 获取异常类</div><div class="line">Yii::$app-&gt;errorHandler-&gt;exception</div><div class="line"></div><div class="line">#### 获取异常信息</div><div class="line">Yii::$app-&gt;errorHandler-&gt;exception-&gt;getMessage(),</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于foreach循环的数据只能新增1条问题&quot;&gt;&lt;a href=&quot;#关于foreach循环的数据只能新增1条问题&quot; class=&quot;headerlink&quot; title=&quot;关于foreach循环的数据只能新增1条问题&quot;&gt;&lt;/a&gt;关于foreach循环的数据只能新增1条
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="yii2" scheme="http://yoursite.com/tags/yii2/"/>
    
  </entry>
  
</feed>
